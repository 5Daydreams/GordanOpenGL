#version 330 core

// type of output of this shader (vec4 for RGBA colour)
out vec4 FragColor;

// the "in" keyword means these values come from the associated vertex shader
in vec2 texCoord;
in vec3 Normal;
in vec3 crntPos;

// Not the cleanest way, but this struct stores the lightcolor data from a single directional light source.
// Something to handle later will be handling multiple light sources
struct DirectionalLight {
    vec3 direction;
  
    // these values could be generated by scaling
    vec3 lightColor;
};

uniform DirectionalLight light;
uniform sampler2D blendTexture;

uniform float highlightThreshold;
uniform float shadeThreshold;
uniform vec2 renderTargetSize;

void main()
{
	float dirLightFalloff = dot(light.direction,Normal);

	float dirLightFalloffSat = clamp(dirLightFalloff ,0.0,1.0);

	vec2 uv = (gl_FragCoord.xy / renderTargetSize);

	float normalizedLightFalloff = (dirLightFalloff + 1.0f)*0.5f;

	// The multiplication is carried out here to block "false light" hitting the bottom of the mesh
	float noiseTextureValue = texture(blendTexture, texCoord).r * normalizedLightFalloff;

	float thing = highlightThreshold + shadeThreshold;

	FragColor = vec4( (noiseTextureValue + dirLightFalloffSat) * light.lightColor, 1.0f) + thing * 0.0f;
}
